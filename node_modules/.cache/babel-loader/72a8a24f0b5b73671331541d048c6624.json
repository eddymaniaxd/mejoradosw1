{"ast":null,"code":"var _jsxFileName = \"C:\\\\sw1\\\\FDiagramaC4-master\\\\src\\\\router\\\\AppRouter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Redirect } from \"react-router-dom\";\nimport { apiDiagrama } from '../api/apiDiagrama';\nimport { authContext } from '../context/authContext';\nimport LoginPage from '../page/auth/LoginPage';\nimport RegisterPage from '../page/auth/RegisterPage';\nimport BoardPage from '../page/board/BoardPage';\nimport HomePage from '../page/home/HomePage';\nimport { types } from '../type/types';\nimport PrivateRouter from './PrivateRouter';\nimport PublicRouter from './PublicRouter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AppRouter = () => {\n  _s();\n\n  const {\n    auth,\n    dispatch\n  } = useContext(authContext);\n  const {\n    isAuthenticated\n  } = auth;\n  const [validateToken, setvalidateToken] = useState(false);\n  const Validate = useCallback(async token => {\n    let {\n      id\n    } = JSON.parse(atob(token));\n    let res = await apiDiagrama(`/user/getOne/${id}`);\n\n    if (!res.ok) {\n      return;\n    }\n\n    const {\n      name,\n      email\n    } = res.data;\n    dispatch({\n      type: types.authLogin,\n      payload: {\n        id,\n        name,\n        email\n      }\n    });\n  }, [dispatch]);\n  useEffect(() => {\n    let token = localStorage.getItem(\"keyID\") || null;\n\n    if (token) {\n      Validate(token).then(() => {\n        setvalidateToken(true);\n      });\n      return;\n    }\n\n    setvalidateToken(true);\n  }, [Validate]);\n\n  if (!validateToken) {\n    return /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-center\",\n      children: \"Loading..\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(PrivateRouter, {\n          exact: true,\n          path: \"/\",\n          component: HomePage,\n          isAuthenticated: isAuthenticated\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PrivateRouter, {\n          exact: true,\n          path: \"/board/:idsala\",\n          component: BoardPage,\n          isAuthenticated: isAuthenticated\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PublicRouter, {\n          exact: true,\n          path: \"/login\",\n          component: LoginPage,\n          isAuthenticated: isAuthenticated\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PublicRouter, {\n          exact: true,\n          path: \"/register\",\n          component: RegisterPage,\n          isAuthenticated: isAuthenticated\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AppRouter, \"asS4nOsOQwi0zxCZW2sw3uYyLfU=\");\n\n_c = AppRouter;\nexport default AppRouter;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppRouter\");","map":{"version":3,"sources":["C:/sw1/FDiagramaC4-master/src/router/AppRouter.js"],"names":["React","useCallback","useContext","useEffect","useState","BrowserRouter","Router","Switch","Redirect","apiDiagrama","authContext","LoginPage","RegisterPage","BoardPage","HomePage","types","PrivateRouter","PublicRouter","AppRouter","auth","dispatch","isAuthenticated","validateToken","setvalidateToken","Validate","token","id","JSON","parse","atob","res","ok","name","email","data","type","authLogin","payload","localStorage","getItem","then"],"mappings":"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","sourcesContent":["import React, { useCallback, useContext, useEffect, useState } from 'react'\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Redirect\n} from \"react-router-dom\";\nimport { apiDiagrama } from '../api/apiDiagrama';\nimport { authContext } from '../context/authContext';\nimport LoginPage from '../page/auth/LoginPage';\nimport RegisterPage from '../page/auth/RegisterPage';\nimport BoardPage from '../page/board/BoardPage';\nimport HomePage from '../page/home/HomePage';\nimport { types } from '../type/types';\nimport PrivateRouter from './PrivateRouter';\nimport PublicRouter from './PublicRouter';\n\nconst AppRouter = () => {\n\n    const { auth, dispatch } = useContext(authContext);\n    const { isAuthenticated } = auth;\n    const [validateToken, setvalidateToken] = useState(false);\n\n\n    const Validate = useCallback(async (token) => {\n\n        let { id } = JSON.parse(atob(token));\n\n        let res = await apiDiagrama(`/user/getOne/${id}`);\n\n        if (!res.ok) {\n            return;\n        }\n\n        const { name, email } = res.data;\n\n        dispatch({\n            type: types.authLogin,\n            payload: { id, name, email }\n        });\n\n    }, [dispatch]);\n\n    useEffect(() => {\n\n        let token = localStorage.getItem(\"keyID\") || null;\n\n        if (token) {\n            Validate(token).then(() => {\n                setvalidateToken(true);\n            });\n\n            return;\n        }\n\n        setvalidateToken(true);\n\n    }, [Validate]);\n\n\n\n    if (!validateToken) {\n        return <h3 className='text-center'>Loading..</h3>\n    }\n\n    return (\n        <Router>\n            <div>\n                <Switch>\n\n                    <PrivateRouter exact path='/' component={HomePage} isAuthenticated={isAuthenticated} />\n                    <PrivateRouter exact path='/board/:idsala' component={BoardPage} isAuthenticated={isAuthenticated} />\n\n                    <PublicRouter exact path='/login' component={LoginPage} isAuthenticated={isAuthenticated} />\n                    <PublicRouter exact path='/register' component={RegisterPage} isAuthenticated={isAuthenticated} />\n\n\n                    <Redirect to=\"/login\" />\n\n                </Switch>\n            </div>\n        </Router>\n    )\n}\n\nexport default AppRouter\n"]},"metadata":{},"sourceType":"module"}